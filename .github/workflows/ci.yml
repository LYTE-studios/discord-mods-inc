name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    services:
      # Add PostgreSQL service for integration tests
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pylint black mypy

    - name: Run linting
      run: |
        black . --check
        pylint **/*.py
        mypy .

    - name: Run tests with coverage
      env:
        # Test environment variables
        DISCORD_TOKEN: ${{ secrets.TEST_DISCORD_TOKEN }}
        DISCORD_GUILD_ID: ${{ secrets.TEST_DISCORD_GUILD_ID }}
        SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.TEST_SUPABASE_KEY }}
        OPENAI_API_KEY: ${{ secrets.TEST_OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
        JWT_SECRET_KEY: ${{ secrets.TEST_JWT_SECRET }}
        ENCRYPTION_KEY: ${{ secrets.TEST_ENCRYPTION_KEY }}
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run security checks
      run: |
        bandit -r ./ -c pyproject.toml
        safety check

    - name: Run dependency review
      uses: actions/dependency-review-action@v3

  docker:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=sha,format=long
          type=semver,pattern={{version}}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max