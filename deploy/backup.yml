---
- name: Backup Discord AI Bot Data
  hosts: production
  become: yes
  vars:
    app_name: discord-ai-bot
    backup_dir: "/opt/{{ app_name }}/backups"
    timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
    backup_bucket: "{{ lookup('env', 'BACKUP_BUCKET') }}"

  tasks:
    - name: Ensure backup directory exists
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'

    - name: Stop application container
      docker_container:
        name: "{{ app_name }}"
        state: stopped

    - name: Backup database
      block:
        - name: Export Supabase database
          command: >
            docker exec supabase_db
            pg_dump -U postgres -F c -b -v -f /tmp/db_backup.dump
          register: db_backup

        - name: Copy database backup
          fetch:
            src: /tmp/db_backup.dump
            dest: "{{ backup_dir }}/db_{{ timestamp }}.dump"
            flat: yes

    - name: Backup application data
      archive:
        path: "/opt/{{ app_name }}/data"
        dest: "{{ backup_dir }}/data_{{ timestamp }}.tar.gz"
        format: gz

    - name: Start application container
      docker_container:
        name: "{{ app_name }}"
        state: started

    - name: Upload backups to S3
      aws_s3:
        bucket: "{{ backup_bucket }}"
        object: "{{ item }}"
        src: "{{ backup_dir }}/{{ item }}"
        mode: put
      with_items:
        - "db_{{ timestamp }}.dump"
        - "data_{{ timestamp }}.tar.gz"

    - name: Cleanup old local backups
      find:
        paths: "{{ backup_dir }}"
        age: 7d
        recurse: no
      register: old_backups

    - name: Remove old backup files
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ old_backups.files }}"

    - name: Cleanup old S3 backups
      aws_s3:
        bucket: "{{ backup_bucket }}"
        prefix: "{{ app_name }}"
        mode: list
      register: s3_files

    - name: Remove old S3 backups
      aws_s3:
        bucket: "{{ backup_bucket }}"
        object: "{{ item.key }}"
        mode: delobj
      when: (ansible_date_time.epoch | int) - (item.last_modified_epoch | int) > 2592000
      with_items: "{{ s3_files.s3_keys }}"

    - name: Verify backup integrity
      block:
        - name: Check database backup
          command: >
            pg_restore --list "{{ backup_dir }}/db_{{ timestamp }}.dump"
          register: db_verify

        - name: Check data backup
          command: >
            tar -tzf "{{ backup_dir }}/data_{{ timestamp }}.tar.gz"
          register: data_verify

    - name: Notify backup status
      slack:
        token: "{{ slack_token }}"
        msg: "✅ Backup completed successfully for {{ app_name }}"
        channel: "{{ slack_channel }}"
      when: slack_token is defined

  handlers:
    - name: Notify backup failure
      slack:
        token: "{{ slack_token }}"
        msg: "❌ Backup failed for {{ app_name }}"
        channel: "{{ slack_channel }}"
      when: slack_token is defined