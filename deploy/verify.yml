---
- name: Verify Discord AI Bot Deployment
  hosts: production
  become: yes
  vars:
    app_name: discord-ai-bot
    health_check_url: "http://localhost:8080/health"
    verification_timeout: 300

  tasks:
    - name: Check if container is running
      docker_container_info:
        name: "{{ app_name }}"
      register: container_info

    - name: Verify container status
      assert:
        that:
          - container_info.container.State.Running
          - container_info.container.State.Health.Status == "healthy"
        fail_msg: "Container is not running or unhealthy"
        success_msg: "Container is running and healthy"

    - name: Check application health endpoint
      uri:
        url: "{{ health_check_url }}"
        method: GET
        status_code: 200
        return_content: yes
      register: health_check
      retries: 5
      delay: 10
      until: health_check.status == 200

    - name: Verify database connection
      command: >
        docker exec {{ app_name }}
        python -c "from database.supabase_client import db; assert db.client is not None"
      register: db_check

    - name: Check Discord connection
      command: >
        docker exec {{ app_name }}
        python -c "from discord.ext import commands; assert commands.Bot.is_ready()"
      register: discord_check

    - name: Verify monitoring setup
      uri:
        url: "http://localhost:9090/-/healthy"
        method: GET
        status_code: 200
      register: prometheus_check

    - name: Check Grafana
      uri:
        url: "http://localhost:3000/api/health"
        method: GET
        status_code: 200
      register: grafana_check

    - name: Verify log shipping
      command: "filebeat test config"
      register: filebeat_check

    - name: Check backup system
      stat:
        path: "/opt/{{ app_name }}/backups"
      register: backup_dir

    - name: Verify recent backup exists
      find:
        paths: "/opt/{{ app_name }}/backups"
        age: 1d
        recurse: no
      register: recent_backups
      failed_when: recent_backups.matched == 0

    - name: Check system resources
      command: >
        docker stats {{ app_name }} --no-stream --format "{{.CPUPerc}}\t{{.MemPerc}}"
      register: resource_usage

    - name: Verify resource usage
      assert:
        that:
          - resource_usage.stdout.split()[0] | float < 80
          - resource_usage.stdout.split()[1] | float < 80
        fail_msg: "Resource usage is too high"
        success_msg: "Resource usage is within acceptable limits"

    - name: Generate verification report
      template:
        src: templates/verification_report.j2
        dest: "/opt/{{ app_name }}/verification_{{ ansible_date_time.iso8601 }}.txt"

    - name: Send verification report
      slack:
        token: "{{ slack_token }}"
        msg: |
          Deployment Verification Report for {{ app_name }}:
          - Container Status: ✅
          - Health Check: ✅
          - Database Connection: ✅
          - Discord Connection: ✅
          - Monitoring: ✅
          - Logging: ✅
          - Backups: ✅
          - Resource Usage: ✅
        channel: "{{ slack_channel }}"
      when: slack_token is defined

  handlers:
    - name: Report verification failure
      slack:
        token: "{{ slack_token }}"
        msg: "❌ Deployment verification failed for {{ app_name }}"
        channel: "{{ slack_channel }}"
      when: slack_token is defined